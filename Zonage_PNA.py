import streamlit as st
import pandas as pd
import json
from shapely.geometry import Point, shape
import time
import re
import geopandas as gpd
import requests

# Configuration de la page
st.set_page_config(page_title="V√©rificateur de Zones PNA", page_icon="ü¶á", layout="wide")

# Titre et description
st.title("V√©rificateur de Zones PNA (Plans Nationaux d'Actions)")
st.markdown("Cet outil vous permet de v√©rifier si une adresse ou des coordonn√©es se trouvent dans une zone de Plan National d'Actions.")

# Fonction de g√©ocodage utilisant l'API adresse.data.gouv.fr
def get_coordinates(address):
    with st.spinner("Recherche des coordonn√©es..."):
        # Utiliser l'API adresse.data.gouv.fr (sp√©cifique √† la France)
        try:
            # Encoder l'adresse pour l'URL
            encoded_address = requests.utils.quote(address)
            
            # URL de l'API fran√ßaise
            url = f"https://api-adresse.data.gouv.fr/search/?q={encoded_address}&limit=1"
            
            # Faire la requ√™te
            response = requests.get(url, timeout=10)
            
            # Traiter la r√©ponse
            if response.status_code == 200:
                data = response.json()
                
                # V√©rifier si des r√©sultats ont √©t√© trouv√©s
                if data and data.get('features') and len(data['features']) > 0:
                    # R√©cup√©rer les coordonn√©es (attention: l'API renvoie [lon, lat])
                    lon, lat = data['features'][0]['geometry']['coordinates']
                    
                    # R√©cup√©rer √©galement l'adresse compl√®te pour l'afficher
                    full_address = data['features'][0]['properties'].get('label', address)
                    score = data['features'][0]['properties'].get('score', 0) * 100
                    
                    # Afficher un message de succ√®s
                    st.success(f"‚úÖ Adresse trouv√©e: {full_address} (confiance: {score:.1f}%)")
                    
                    # Convertir en Lambert 93 pour faciliter les comparaisons avec nos donn√©es
                    point_wgs84 = gpd.GeoDataFrame(geometry=[Point(lon, lat)], crs="EPSG:4326")
                    point_l93 = point_wgs84.to_crs("EPSG:2154")
                    x_l93, y_l93 = point_l93.geometry[0].x, point_l93.geometry[0].y
                    
                    # Retourner les coordonn√©es (WGS84 pour l'affichage, Lambert93 pour l'analyse)
                    return (lat, lon, x_l93, y_l93, full_address)
                else:
                    st.warning("‚ùå Aucun r√©sultat trouv√© pour cette adresse")
            else:
                st.warning(f"‚ö†Ô∏è Erreur lors de la requ√™te: {response.status_code}")
                
        except Exception as e:
            st.error(f"‚ö†Ô∏è Erreur lors de la requ√™te √† l'API adresse.data.gouv.fr: {str(e)}")
            
        # Si l'API fran√ßaise √©choue, proposer la saisie manuelle
        st.error("‚ö†Ô∏è Impossible de g√©ocoder cette adresse.")
        
        # Option pour saisie manuelle
        if st.checkbox("‚úèÔ∏è Saisir manuellement les coordonn√©es ?"):
            col1, col2 = st.columns(2)
            with col1:
                manual_lat = st.number_input("Latitude WGS84", value=43.6, format="%.6f")
            with col2:
                manual_lon = st.number_input("Longitude WGS84", value=2.7, format="%.6f")
            
            if st.button("Utiliser ces coordonn√©es"):
                # Convertir en Lambert 93
                point_wgs84 = gpd.GeoDataFrame(geometry=[Point(manual_lon, manual_lat)], crs="EPSG:4326")
                point_l93 = point_wgs84.to_crs("EPSG:2154")
                x_l93, y_l93 = point_l93.geometry[0].x, point_l93.geometry[0].y
                
                return (manual_lat, manual_lon, x_l93, y_l93, f"Coordonn√©es manuelles: {manual_lat}, {manual_lon}")
                
    return None

# Fonction pour v√©rifier si un point est dans une zone PNA
def is_in_pna(lat, lon, x_l93, y_l93, all_data_sources):
    try:
        # Point en WGS84 pour l'affichage
        point_wgs84 = Point(lon, lat)
        # Point en Lambert 93 pour l'analyse
        point_l93 = Point(x_l93, y_l93)
        
        results = []
        
        # V√©rifier dans chaque fichier charg√©
        for file_name, file_info in all_data_sources.items():
            data_source = file_info["data"]
            data_type = file_info["type"]
            
            # Convertir le point en Lambert 93 pour comparaison
            point_buffer = point_l93.buffer(1)  # 1 m√®tre en Lambert 93
            
            # Parcourir les features du GeoJSON
            for feature in data_source['features']:
                try:
                    pna_shape = shape(feature['geometry'])
                    properties = feature['properties']
                    
                    # V√©rification directe
                    if pna_shape.contains(point_l93) or pna_shape.intersects(point_buffer):
                        # Traitement sp√©cifique pour les chiropt√®res
                        if data_type == "Chiropt√®res":
                            enjeu = properties.get("t_enjeux", "Ind√©termin√©")
                            properties["enjeu_d√©taill√©"] = enjeu
                        
                        # Ajouter le type de PNA et le nom du fichier
                        properties["type_pna"] = data_type
                        properties["fichier_source"] = file_name
                        
                        results.append(properties)
                except Exception as e:
                    continue
        
        if results:
            return True, results
        else:
            return False, None
    except Exception as e:
        st.error(f"Erreur lors de la v√©rification des zones: {str(e)}")
        return False, None
# Structure √† deux colonnes
col1, col2 = st.columns([1, 3])

# Colonne de gauche pour le chargement du fichier
with col1:
    st.header("Chargement des donn√©es")
    
    # Options de donn√©es √† v√©rifier
    st.subheader("Type de donn√©es")
    pna_type = st.selectbox(
        "S√©lectionner un type de PNA",
        [
            "D√©tection automatique", 
            "Chiropt√®res", 
            "Odonates", 
            "Pie-gri√®che grise", 
            "Pie-gri√®che m√©ridionale", 
            "Pie-gri√®che √† t√™te rousse"
        ]
    )
    
    # Variable pour stocker les donn√©es de tous les fichiers charg√©s
    all_data_sources = {}
    file_types = {}
    
    uploaded_files = st.file_uploader(
        "Fichiers des zones PNA", 
        type=["geojson", "json"],
        accept_multiple_files=True,
        help="Formats support√©s: GeoJSON, JSON en projection Lambert 93 (EPSG:2154)"
    )
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            try:
                file_extension = uploaded_file.name.split('.')[-1].lower()
                file_name = uploaded_file.name
                
                # Variable pour stocker le type d√©tect√©
                detected_type = "Type non d√©tect√©"
                
                # D√©tecter automatiquement le type de PNA si demand√©
                if pna_type == "D√©tection automatique":
                    # Premi√®re tentative : d√©tection par le nom du fichier
                    if "chiroptere" in file_name.lower() or "chauve" in file_name.lower():
                        detected_type = "Chiropt√®res"
                    elif "odonat" in file_name.lower() or "libellule" in file_name.lower():
                        detected_type = "Odonates"
                    elif "griseche" in file_name.lower() and "grise" in file_name.lower():
                        detected_type = "Pie-gri√®che grise"
                    elif "griseche" in file_name.lower() and "merid" in file_name.lower():
                        detected_type = "Pie-gri√®che m√©ridionale"
                    elif "griseche" in file_name.lower() and "rousse" in file_name.lower() or "tete rousse" in file_name.lower():
                        detected_type = "Pie-gri√®che √† t√™te rousse"
                    
                    current_type = detected_type
                else:
                    current_type = pna_type
                
                if file_extension in ['geojson', 'json']:
                    data = json.load(uploaded_file)
                    
                    # V√©rifier si c'est un GeoJSON valide
                    if 'type' in data and 'features' in data:
                        # Si on est en mode d√©tection automatique et que le type n'a pas √©t√© d√©tect√© par le nom
                        if pna_type == "D√©tection automatique" and detected_type == "Type non d√©tect√©":
                            # Parcourir quelques features pour analyser le contenu
                            for feature in data['features'][:10]:  # Limiter √† 10 features pour des raisons de performance
                                if 'properties' in feature:
                                    props = feature['properties']
                                    
                                    # Chercher des indices dans les propri√©t√©s
                                    if 'n_espece' in props:
                                        espece = str(props['n_espece']).lower()
                                        if 'chauve' in espece or 'chiropt√®re' in espece or 'chiroptere' in espece:
                                            detected_type = "Chiropt√®res"
                                            break
                                        elif 'odonates' in espece or 'libellule' in espece:
                                            detected_type = "Odonates"
                                            break
                                        elif 'gri√®che' in espece or 'grieche' in espece:
                                            if 'grise' in espece and not 't√™te' in espece and not 'tete' in espece:
                                                detected_type = "Pie-gri√®che grise"
                                                break
                                            elif 'm√©rid' in espece or 'merid' in espece:
                                                detected_type = "Pie-gri√®che m√©ridionale"
                                                break
                                            elif 't√™te rousse' in espece or 'tete rousse' in espece:
                                                detected_type = "Pie-gri√®che √† t√™te rousse"
                                                break
                            
                            # Mise √† jour du type d√©tect√©
                            if detected_type != "Type non d√©tect√©":
                                current_type = detected_type
                        
                        # Stocker le fichier avec son type d√©tect√©
                        if current_type == "Type non d√©tect√©":
                            current_type = "Type inconnu"
                        
                        # Ajouter au dictionnaire de sources de donn√©es
                        all_data_sources[file_name] = {
                            "data": data,
                            "type": current_type
                        }
                        
                        file_types[file_name] = "geojson"
                        
                        st.success(f"Fichier '{file_name}' charg√© avec succ√®s. Type d√©tect√©: {current_type}. {len(data['features'])} zones.")
                    else:
                        st.error(f"Format du fichier '{file_name}' GeoJSON invalide")
            except Exception as e:
                st.error(f"Erreur lors du chargement de '{file_name}': {str(e)}")
        
        # Afficher un r√©sum√© des fichiers charg√©s
        if all_data_sources:
            st.subheader("Fichiers charg√©s")
            
            # Cr√©er un DataFrame pour l'affichage
            file_summary = []
            for file_name, file_info in all_data_sources.items():
                feature_count = len(file_info["data"]["features"])
                file_summary.append({
                    "Fichier": file_name,
                    "Type PNA": file_info["type"],
                    "Nombre de zones": feature_count
                })
            
            # Afficher le tableau r√©capitulatif
            st.dataframe(pd.DataFrame(file_summary))
    
    # Ajouter des informations sur l'API utilis√©e
    st.markdown("---")
    if all_data_sources:
        st.success(f"‚úÖ {len(all_data_sources)} fichier(s) GeoJSON charg√©(s), pr√™t pour la v√©rification.")
    
    st.info("‚ú® Cette application utilise l'API adresse.data.gouv.fr pour le g√©ocodage des adresses fran√ßaises.")

# Colonne de droite pour la v√©rification
with col2:
    st.header("V√©rification")
    
    # Initialisation des variables de session si elles n'existent pas
    if 'reset_pressed' not in st.session_state:
        st.session_state.reset_pressed = False
    if 'last_address' not in st.session_state:
        st.session_state.last_address = ""
    if 'last_lat' not in st.session_state:
        st.session_state.last_lat = 43.6
    if 'last_lon' not in st.session_state:
        st.session_state.last_lon = 2.7
    
    # Fonction pour r√©initialiser les champs
    def reset_fields():
        st.session_state.reset_pressed = True
        st.session_state.last_address = ""
        st.session_state.last_lat = 43.6
        st.session_state.last_lon = 2.7
    
    # Bouton de r√©initialisation
    reset_col, spacer = st.columns([1, 3])
    with reset_col:
        st.button("üîÑ Nouvelle recherche", on_click=reset_fields, help="R√©initialiser les champs et effacer les r√©sultats")
    
    # Mode de saisie
    input_mode = st.radio("Mode", ["Adresse", "Coordonn√©es"])

    # Placeholder pour les r√©sultats (vide au d√©but)
    results_placeholder = st.empty()
    
    # Conteneur pour les r√©sultats
    with results_placeholder.container():
        if input_mode == "Adresse":
            # Utiliser la derni√®re adresse ou une cha√Æne vide si r√©initialisation
            if st.session_state.reset_pressed:
                initial_address = ""
                st.session_state.reset_pressed = False  # R√©initialiser le flag
            else:
                initial_address = st.session_state.last_address
                
            address = st.text_input("Entrez une adresse", value=initial_address,
                                   help="Exemple: 1 Place de la Mairie, 34000 Montpellier")
            # Stocker l'adresse actuelle
            st.session_state.last_address = address
            
            check_button = st.button("V√©rifier l'adresse")
            
            # Ne continuer que si on a cliqu√© sur le bouton et qu'un fichier est charg√©
            if check_button and address:
                if not all_data_sources:
                    st.error("Veuillez d'abord charger au moins un fichier GeoJSON")
                else:
                    # Effacer le contenu du placeholder
                    results_placeholder.empty()
                    
                    # Recr√©er un conteneur pour les nouveaux r√©sultats
                    with results_placeholder.container():
                        st.write(f"Adresse saisie: {address}")
                        
                        # G√©ocodage
                        coordinates = get_coordinates(address)
                        if coordinates:
                            lat, lon, x_l93, y_l93, full_address = coordinates
                            st.write(f"Coordonn√©es WGS84: {lat:.6f}, {lon:.6f}")
                            st.write(f"Coordonn√©es Lambert 93: {x_l93:.2f}, {y_l93:.2f}")
                            
                            # V√©rification PNA avec les coordonn√©es Lambert 93
                            in_pna, results = is_in_pna(lat, lon, x_l93, y_l93, all_data_sources)
                            
                            # Afficher le r√©sultat textuel
                            if in_pna:
                                st.success(f"‚úÖ Cette adresse est situ√©e dans {len(results)} zone(s) PNA")
                                
                                # Cr√©er un tableau avec tous les r√©sultats
                                result_data = []
                                for i, props in enumerate(results, 1):
                                    pna_type = props.get("type_pna", "Inconnu")
                                    file_source = props.get("fichier_source", "")
                                    espece = props.get("n_espece", "Non sp√©cifi√©")
                                    enjeu = ""
                                    
                                    if pna_type == "Chiropt√®res":
                                        enjeu = props.get("enjeu_d√©taill√©", "Ind√©termin√©")
                                    
                                    result_data.append({
                                        "Zone": i,
                                        "Type PNA": pna_type, 
                                        "Esp√®ce": espece,
                                        "Enjeu": enjeu,
                                        "Fichier source": file_source
                                    })
                                
                                # Afficher le tableau r√©capitulatif
                                st.subheader("Zones PNA d√©tect√©es:")
                                st.dataframe(pd.DataFrame(result_data))
                                
                                # Affichage d√©taill√© pour chaque zone
                                for i, props in enumerate(results, 1):
                                    with st.expander(f"D√©tails de la zone {i} - {props.get('n_espece', 'Non sp√©cifi√©')}"):
                                        # Filtrer et trier les propri√©t√©s pour plus de clart√©
                                        important_props = {}
                                        other_props = {}
                                        
                                        # D√©finir les propri√©t√©s importantes √† afficher en premier
                                        priority_keys = ["n_espece", "t_enjeux", "enjeu_d√©taill√©", "type_pna", "richessesp", "n_commune", "c_insee"]
                                        
                                        for k, v in props.items():
                                            if k in priority_keys:
                                                important_props[k] = v
                                            else:
                                                other_props[k] = v
                                        
                                        # Utiliser des tabs au lieu d'expanders imbriqu√©s
                                        tab1, tab2 = st.tabs(["Propri√©t√©s principales", "Propri√©t√©s d√©taill√©es"])
                                        
                                        with tab1:
                                            if important_props:
                                                df_important = pd.DataFrame(list(important_props.items()), 
                                                                        columns=["Propri√©t√©", "Valeur"])
                                                st.dataframe(df_important)
                                            else:
                                                st.info("Aucune propri√©t√© principale disponible")
                                        
                                        with tab2:
                                            if other_props:
                                                df_other = pd.DataFrame(list(other_props.items()), 
                                                                    columns=["Propri√©t√©", "Valeur"])
                                                st.dataframe(df_other)
                                            else:
                                                st.info("Aucune propri√©t√© d√©taill√©e disponible")
                            else:
                                st.warning(f"‚ùå Cette adresse n'est dans aucune zone PNA parmi les fichiers charg√©s")
                            
                            # Ajouter un bouton pour refaire une recherche
                            st.button("üîÑ Faire une nouvelle recherche", on_click=reset_fields)
                        else:
                            st.error("Impossible de g√©ocoder cette adresse")
        else:  # Mode Coordonn√©es
            # Utiliser les derni√®res coordonn√©es ou les valeurs par d√©faut si r√©initialisation
            if st.session_state.reset_pressed:
                initial_lat = 43.6  # Centre approximatif de l'Occitanie
                initial_lon = 2.7
                st.session_state.reset_pressed = False  # R√©initialiser le flag
            else:
                initial_lat = st.session_state.last_lat
                initial_lon = st.session_state.last_lon
            
            st.write("Coordonn√©es en WGS84 (format GPS standard)")
            lat_col, lon_col = st.columns(2)
            with lat_col:
                lat = st.number_input("Latitude", value=initial_lat, format="%.6f")
            with lon_col:
                lon = st.number_input("Longitude", value=initial_lon, format="%.6f")
            
            # Option pour saisir en Lambert93
            use_lambert93 = st.checkbox("Saisir en Lambert 93")
            
            if use_lambert93:
                l93_col1, l93_col2 = st.columns(2)
                with l93_col1:
                    x_l93 = st.number_input("X (Lambert 93)", value=650000.0, format="%.1f")
                with l93_col2:
                    y_l93 = st.number_input("Y (Lambert 93)", value=6250000.0, format="%.1f")
                
                # Convertir Lambert93 en WGS84 pour l'affichage
                point_l93 = gpd.GeoDataFrame(geometry=[Point(x_l93, y_l93)], crs="EPSG:2154")
                point_wgs84 = point_l93.to_crs("EPSG:4326")
                lat = point_wgs84.geometry[0].y
                lon = point_wgs84.geometry[0].x
                
                # Mise √† jour des valeurs affich√©es
                st.write(f"Coordonn√©es √©quivalentes en WGS84: {lat:.6f}, {lon:.6f}")
            else:
                # Convertir WGS84 en Lambert93 pour l'analyse
                point_wgs84 = gpd.GeoDataFrame(geometry=[Point(lon, lat)], crs="EPSG:4326")
                point_l93 = point_wgs84.to_crs("EPSG:2154")
                x_l93, y_l93 = point_l93.geometry[0].x, point_l93.geometry[0].y
            
            # Bouton de v√©rification pour les coordonn√©es
            check_coords = st.button("V√©rifier les coordonn√©es")
            
            if check_coords:
                if not all_data_sources:
                    st.error("Veuillez d'abord charger au moins un fichier GeoJSON")
                else:
                    # Mettre √† jour les coordonn√©es en session state
                    st.session_state.last_lat = lat
                    st.session_state.last_lon = lon
                    
                    # Effacer le placeholder et cr√©er un nouveau conteneur
                    results_placeholder.empty()
                    
                    with results_placeholder.container():
                        st.write(f"Coordonn√©es WGS84: {lat:.6f}, {lon:.6f}")
                        st.write(f"Coordonn√©es Lambert 93: {x_l93:.2f}, {y_l93:.2f}")
                        
                        # V√©rification PNA
                        in_pna, results = is_in_pna(lat, lon, x_l93, y_l93, all_data_sources)
                        
                        # Afficher le r√©sultat textuel
                        if in_pna:
                            st.success(f"‚úÖ Ces coordonn√©es sont situ√©es dans {len(results)} zone(s) PNA")
                            
                            # Cr√©er un tableau avec tous les r√©sultats
                            result_data = []
                            for i, props in enumerate(results, 1):
                                pna_type = props.get("type_pna", "Inconnu")
                                file_source = props.get("fichier_source", "")
                                espece = props.get("n_espece", "Non sp√©cifi√©")
                                enjeu = ""
                                
                                if pna_type == "Chiropt√®res":
                                    enjeu = props.get("enjeu_d√©taill√©", "Ind√©termin√©")
                                
                                result_data.append({
                                    "Zone": i,
                                    "Type PNA": pna_type, 
                                    "Esp√®ce": espece,
                                    "Enjeu": enjeu,
                                    "Fichier source": file_source
                                })
                            
                            # Afficher le tableau r√©capitulatif
                            st.subheader("Zones PNA d√©tect√©es:")
                            st.dataframe(pd.DataFrame(result_data))
                            
                            # Affichage d√©taill√© pour chaque zone
                            for i, props in enumerate(results, 1):
                                with st.expander(f"D√©tails de la zone {i} - {props.get('n_espece', 'Non sp√©cifi√©')}"):
                                    # Filtrer et trier les propri√©t√©s pour plus de clart√©
                                    important_props = {}
                                    other_props = {}
                                    
                                    # D√©finir les propri√©t√©s importantes √† afficher en premier
                                    priority_keys = ["n_espece", "t_enjeux", "enjeu_d√©taill√©", "type_pna", "richessesp", "n_commune", "c_insee"]
                                    
                                    for k, v in props.items():
                                        if k in priority_keys:
                                            important_props[k] = v
                                        else:
                                            other_props[k] = v
                                    
                                    # Utiliser des tabs au lieu d'expanders imbriqu√©s
                                    tab1, tab2 = st.tabs(["Propri√©t√©s principales", "Propri√©t√©s d√©taill√©es"])
                                    
                                    with tab1:
                                        if important_props:
                                            df_important = pd.DataFrame(list(important_props.items()), 
                                                                    columns=["Propri√©t√©", "Valeur"])
                                            st.dataframe(df_important)
                                        else:
                                            st.info("Aucune propri√©t√© principale disponible")
                                    
                                    with tab2:
                                        if other_props:
                                            df_other = pd.DataFrame(list(other_props.items()), 
                                                                columns=["Propri√©t√©", "Valeur"])
                                            st.dataframe(df_other)
                                        else:
                                            st.info("Aucune propri√©t√© d√©taill√©e disponible")
                        else:
                            st.warning(f"‚ùå Ces coordonn√©es ne sont dans aucune zone PNA parmi les fichiers charg√©s")
                        
                        # Ajouter un bouton pour refaire une recherche
                        st.button("üîÑ Faire une nouvelle recherche", on_click=reset_fields)

# Pied de page
st.markdown("---")
st.info("""Cette application v√©rifie si une adresse ou des coordonn√©es GPS sont situ√©es dans une 
        zone de Plan National d'Actions (PNA). Supporte les fichiers GeoJSON.
        Vous pouvez charger plusieurs fichiers GeoJSON pour v√©rifier si un point est dans plusieurs types de zones PNA simultan√©ment.
        Utilise l'API adresse.data.gouv.fr pour le g√©ocodage.""")